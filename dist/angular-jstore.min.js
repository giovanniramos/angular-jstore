/*!
 * Angular jStore [v1.1.4]
 * https://github.com/giovanniramos/angular-jstore
 * 
 * Copyright (c) 2016-2017, Giovanni Ramos
 * Licensed under the MIT license:
 *   http://opensource.org/licenses/MIT
 */
!function(root,factory){"function"==typeof define&&define.amd?define(["angular"],factory):"object"==typeof exports?(factory("undefined"==typeof angular?require("angular"):angular),module.exports="angular-jstore"):factory(root.angular)}(this,function(angular){"use strict";var jstore=angular.module("angular-jstore",[]);return jstore.provider("$jstore",function(){var _prefix="jstoreApp-";this.setPrefix=function(prefix){if("string"!=typeof prefix)throw new TypeError("[angular-jstore] - $jstoreProvider.setPrefix() expects a String.");return _prefix=prefix,this},this.$get=[function(){var _checkBrowserSupport=function(obj,src){return"undefined"!=typeof Storage},_reducePrefix=function(sId){return sId.replace(new RegExp("("+_prefix+"){2,}","g"),_prefix)};return{isSupported:_checkBrowserSupport(),set:function(sId,val){if(_checkBrowserSupport(),"string"!=typeof sId)throw new TypeError("[angular-jstore] - $jstore.set() expects a String but got a `"+typeof sId+"` as a first parameter.");if("string"==typeof val)throw new TypeError("[angular-jstore] - $jstore.set() expects a JSON object instead of a string as a second parameter.");if("object"!=typeof val)throw new TypeError("[angular-jstore] - $jstore.set() expects a JSON object as the second argument.");var sId=_prefix+sId,obj=this.get(sId);return localStorage.setItem(sId,angular.toJson(null==obj?val:angular.merge(obj,val)))},get:function(sId){if(_checkBrowserSupport(),"string"!=typeof sId)throw new TypeError("[angular-jstore] - $jstore.get() expects a String.");var sId=_reducePrefix(_prefix+sId),val=localStorage.getItem(sId);return null!==val?angular.fromJson(val):null},del:function(sId){if(_checkBrowserSupport(),"string"!=typeof sId)throw new TypeError("[angular-jstore] - $jstore.del() expects a String.");var sId=_reducePrefix(_prefix+sId),obj=this.get(sId);if(null!=obj){var args=arguments;if(args.length)for(var i=1;i<args.length;i++)delete obj[args[i]];localStorage.setItem(sId,angular.toJson(obj))}},omit:function(sId){if(_checkBrowserSupport(),"string"!=typeof sId)throw new TypeError("[angular-jstore] - $jstore.omit() expects a String.");var sId=_reducePrefix(_prefix+sId),obj=this.get(sId);if(null!=obj){var nObj={},args=arguments;if(args.length)for(var i=1;i<args.length;i++)$.each(obj,function(key,val){key==args[i]&&(nObj[key]=val)});localStorage.setItem(sId,angular.toJson(nObj))}},has:function(sId){if(_checkBrowserSupport(),"string"!=typeof sId)throw new TypeError("[angular-jstore] - $jstore.has() expects a String.");return null!==this.get(sId)},count:function(){_checkBrowserSupport();for(var count=0,store=localStorage,storeSize=store.length,i=0;i<storeSize;i++)0===store.key(i).indexOf(_prefix)&&count++;return count},each:function(callback){if(_checkBrowserSupport(),"function"!=typeof callback)throw new TypeError("[angular-jstore] - $jstore.each() expects a Function with callback.");for(var store=localStorage,storeSize=store.length,i=0;i<storeSize;i++){var sId=localStorage.key(i);0===store.key(i).indexOf(_prefix)&&callback(sId,this.get(sId))}},remove:function(sId){if(_checkBrowserSupport(),"string"!=typeof sId)throw new TypeError("[angular-jstore] - $jstore.remove() expects a String.");var sId=_reducePrefix(_prefix+sId);localStorage.removeItem(sId)},clear:function(){_checkBrowserSupport(),localStorage.clear()}}}]}),jstore});